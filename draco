local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local Settings = {
    Enabled = false,
    ToggleKey = Enum.KeyCode.Q,
    MaxDistance = 1000,
    BlacklistedTools = { "Knife" },
}

-- Convert blacklist into dictionary for O(1) lookup
local BlacklistedTools = {}
for _, name in ipairs(Settings.BlacklistedTools) do
    BlacklistedTools[name] = true
end

local function isAlive(character)
    local hum = character and character:FindFirstChildOfClass("Humanoid")
    return hum and hum.Health > 0
end

local function bestTool(character)
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") and not BlacklistedTools[tool.Name] then
            return tool
        end
    end
end

local function distance(a, b)
    local rootA = a:FindFirstChild("HumanoidRootPart") or a:FindFirstChild("Head")
    local rootB = b:FindFirstChild("HumanoidRootPart") or b:FindFirstChild("Head")
    if not rootA or not rootB then return math.huge end
    return (rootA.Position - rootB.Position).Magnitude
end

local function hasLineOfSight(targetChar)
    local camPos = Camera.CFrame.Position
    local rootB = targetChar and (targetChar:FindFirstChild("Head") or targetChar:FindFirstChild("HumanoidRootPart"))
    if not rootB then return false end

    local result = workspace:Raycast(camPos, (rootB.Position - camPos), RaycastParams.new({
        FilterType = Enum.RaycastFilterType.Blacklist,
        FilterDescendantsInstances = {LocalPlayer.Character}
    }))

    return not (result and result.Instance and not result.Instance:IsDescendantOf(targetChar))
end

local function crosshairTarget()
    local targetPart = Mouse.Target
    if not targetPart then return end
    local char = targetPart:FindFirstAncestorOfClass("Model")
    if not char or not isAlive(char) then return end
    local player = Players:GetPlayerFromCharacter(char)
    if not player or player == LocalPlayer then return end
    if distance(LocalPlayer.Character, char) > Settings.MaxDistance then return end
    if not hasLineOfSight(char) then return end
    return char
end

UserInputService.InputBegan:Connect(function(input, gp)
    if not gp and input.KeyCode == Settings.ToggleKey then
        Settings.Enabled = not Settings.Enabled
    end
end)

RunService.RenderStepped:Connect(function()
    if not Settings.Enabled then return end

    local myChar = LocalPlayer.Character
    if not myChar or not isAlive(myChar) then return end

    local tool = bestTool(myChar)
    if not tool then return end

    local target = crosshairTarget()
    if target then
        if tool.Parent ~= myChar then
            myChar.Humanoid:EquipTool(tool)
        end
        tool:Activate()
    end
end)
